version: '3'

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"
    networks:
      - main
    healthcheck:
      test: ["CMD", "echo", "ru", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_BROKER_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - main
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:${KAFKA_BROKER_PORT}", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  mongodb:
    container_name: mongodb
    image: mongo:5.0
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - main

  api:
    container_name: api
    build: .
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:${KAFKA_BROKER_PORT}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:${MONGO_PORT}/
    volumes:
      - .:/app
    networks:
      - main

  consumer:
    container_name: consumer
    build: .
    command: python3 app/consumer.py
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:${KAFKA_BROKER_PORT}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      MONGO_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:${MONGO_PORT}/
    volumes:
      - .:/app
    networks:
      - main
    stdin_open: true
    tty: true

volumes:
  mongodb_data:

networks:
  main: